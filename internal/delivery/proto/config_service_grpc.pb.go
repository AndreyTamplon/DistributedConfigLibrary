// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: config_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	CreateConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigResponse, error)
	GetConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*ConfigResponse, error)
	GetConfigByVersion(ctx context.Context, in *ConfigNameAndVersion, opts ...grpc.CallOption) (*ConfigResponse, error)
	UpdateConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigResponse, error)
	DeleteConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeleteConfigVersion(ctx context.Context, in *ConfigNameAndVersion, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (ConfigService_ListConfigsClient, error)
	SetRelevantConfig(ctx context.Context, in *ConfigNameAndVersion, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) CreateConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/tutorial.ConfigService/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/tutorial.ConfigService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetConfigByVersion(ctx context.Context, in *ConfigNameAndVersion, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/tutorial.ConfigService/GetConfigByVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/tutorial.ConfigService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteConfig(ctx context.Context, in *ConfigName, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/tutorial.ConfigService/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteConfigVersion(ctx context.Context, in *ConfigNameAndVersion, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/tutorial.ConfigService/DeleteConfigVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (ConfigService_ListConfigsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigService_ServiceDesc.Streams[0], "/tutorial.ConfigService/ListConfigs", opts...)
	if err != nil {
		return nil, err
	}
	x := &configServiceListConfigsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigService_ListConfigsClient interface {
	Recv() (*ConfigResponse, error)
	grpc.ClientStream
}

type configServiceListConfigsClient struct {
	grpc.ClientStream
}

func (x *configServiceListConfigsClient) Recv() (*ConfigResponse, error) {
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configServiceClient) SetRelevantConfig(ctx context.Context, in *ConfigNameAndVersion, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/tutorial.ConfigService/SetRelevantConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations should embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	CreateConfig(context.Context, *Config) (*ConfigResponse, error)
	GetConfig(context.Context, *ConfigName) (*ConfigResponse, error)
	GetConfigByVersion(context.Context, *ConfigNameAndVersion) (*ConfigResponse, error)
	UpdateConfig(context.Context, *Config) (*ConfigResponse, error)
	DeleteConfig(context.Context, *ConfigName) (*DeleteResponse, error)
	DeleteConfigVersion(context.Context, *ConfigNameAndVersion) (*DeleteResponse, error)
	ListConfigs(*ListRequest, ConfigService_ListConfigsServer) error
	SetRelevantConfig(context.Context, *ConfigNameAndVersion) (*ConfigResponse, error)
}

// UnimplementedConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) CreateConfig(context.Context, *Config) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetConfig(context.Context, *ConfigName) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetConfigByVersion(context.Context, *ConfigNameAndVersion) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigByVersion not implemented")
}
func (UnimplementedConfigServiceServer) UpdateConfig(context.Context, *Config) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedConfigServiceServer) DeleteConfig(context.Context, *ConfigName) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedConfigServiceServer) DeleteConfigVersion(context.Context, *ConfigNameAndVersion) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigVersion not implemented")
}
func (UnimplementedConfigServiceServer) ListConfigs(*ListRequest, ConfigService_ListConfigsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListConfigs not implemented")
}
func (UnimplementedConfigServiceServer) SetRelevantConfig(context.Context, *ConfigNameAndVersion) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelevantConfig not implemented")
}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.ConfigService/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).CreateConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.ConfigService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfig(ctx, req.(*ConfigName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetConfigByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigNameAndVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfigByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.ConfigService/GetConfigByVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfigByVersion(ctx, req.(*ConfigNameAndVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.ConfigService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.ConfigService/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteConfig(ctx, req.(*ConfigName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteConfigVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigNameAndVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteConfigVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.ConfigService/DeleteConfigVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteConfigVersion(ctx, req.(*ConfigNameAndVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListConfigs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigServiceServer).ListConfigs(m, &configServiceListConfigsServer{stream})
}

type ConfigService_ListConfigsServer interface {
	Send(*ConfigResponse) error
	grpc.ServerStream
}

type configServiceListConfigsServer struct {
	grpc.ServerStream
}

func (x *configServiceListConfigsServer) Send(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigService_SetRelevantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigNameAndVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).SetRelevantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.ConfigService/SetRelevantConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).SetRelevantConfig(ctx, req.(*ConfigNameAndVersion))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tutorial.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfig",
			Handler:    _ConfigService_CreateConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ConfigService_GetConfig_Handler,
		},
		{
			MethodName: "GetConfigByVersion",
			Handler:    _ConfigService_GetConfigByVersion_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ConfigService_UpdateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _ConfigService_DeleteConfig_Handler,
		},
		{
			MethodName: "DeleteConfigVersion",
			Handler:    _ConfigService_DeleteConfigVersion_Handler,
		},
		{
			MethodName: "SetRelevantConfig",
			Handler:    _ConfigService_SetRelevantConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListConfigs",
			Handler:       _ConfigService_ListConfigs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config_service.proto",
}
